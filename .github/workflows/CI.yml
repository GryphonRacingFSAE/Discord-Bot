name: GRacing Bot CI

on:
  push:

env:
  CARGO_TERM_COLOR: always

jobs:
  Lint-Type-Build-Check-Bot:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain:
          - stable

    steps:
      - uses: actions/checkout@v4
      - name: Install rustup
        run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}

      - name: Install dependencies
        run: cargo build --verbose

      - name: Format check
        if: always()
        run: cargo fmt --check

      - name: Clippy check
        if: always()
        run: cargo clippy -- -D warnings

      - name: Build project
        if: always()
        run: cargo build --verbose

      - name: Test project
        if: always()
        run: cargo test --verbose

  Lint-Build-Check-Door-Sensor:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - name: Setup PlatformIO
        run: pip install --upgrade platformio

      # Clang Format
      - name: Format Check
        uses: DoozyX/clang-format-lint-action@v0.18
        if: always()
        with:
          source: esp32

      # PlatformIO
      - name: Compile Door Sensor
        if: always()
        run: |
          cd esp32
          pio run

  # Currently we deploy via docker on our shop server, which is set up has a runner
  Deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: [ self-hosted, Linux, X64 ]
    needs: [ Lint-Type-Build-Check-Bot, Lint-Build-Check-Door-Sensor ]
    steps:
      - uses: actions/checkout@v4

      # I installed docker using the docs here: https://docs.docker.com/desktop/install/ubuntu/
      - name: Deploy with Docker
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          DISCORD_GUILD_ID: ${{ secrets.DISCORD_GUILD_ID }}
          EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          EMAIL_SERVICE: ${{ vars.EMAIL_SERVICE }}
          EMAIL_HOST: ${{ vars.EMAIL_HOST }}
          EMAIL_PORT: ${{ vars.EMAIL_PORT }}
        run: |
          docker compose down
          docker compose up 
